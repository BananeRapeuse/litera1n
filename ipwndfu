#!/usr/bin/python
# ipwndfu: open-source jailbreaking tool for older iOS devices
# Original author: axi0mX
# Modder: Ph0qu3_111

import binascii, datetime, getopt, hashlib, struct, sys, time
import dfu, nor, utilities
import alloc8, checkm8, image3_24Kpwn, limera1n, SHAtter, steaks4uce, usbexec
from dfuexec import *

def print_help():
    print('USAGE: ipwndfu [options]')
    print('Interact with an iOS device in DFU Mode.\n')
    print('Basic options:')
    print('  -p\t\t\t\tUSB exploit for pwned DFU Mode')
    print('  -x\t\t\t\tinstall alloc8 exploit to NOR')
    print('  -f file\t\t\tsend file to device in DFU Mode')
    print('Advanced options:')
    print('  --demote\t\t\tdemote device to enable JTAG')
    print('  --boot\t\t\tboot device')
    print('  --dump=address,length\t\tdump memory to stdout')
    print('  --hexdump=address,length\thexdump memory to stdout')
    print('  --dump-rom\t\t\tdump SecureROM')
    print('  --dump-nor=file\t\tdump NOR to file')
    print('  --flash-nor=file\t\tflash NOR (header and firmware only) from file')
    print('  --24kpwn\t\t\tinstall 24Kpwn exploit to NOR')
    print('  --remove-24kpwn\t\tremove 24Kpwn exploit from NOR')
    print('  --remove-alloc8\t\tremove alloc8 exploit from NOR')
    print('  --decrypt-gid=hexdata\t\tAES decrypt with GID key')
    print('  --encrypt-gid=hexdata\t\tAES encrypt with GID key')
    print('  --decrypt-uid=hexdata\t\tAES decrypt with UID key')
    print('  --encrypt-uid=hexdata\t\tAES encrypt with UID key')

if __name__ == '__main__':
    try:
        advanced = ['demote', 'boot', 'dump=', 'hexdump=', 'dump-rom', 'dump-nor=', 'flash-nor=', '24kpwn', 'remove-24kpwn', 'remove-alloc8', 'decrypt-gid=', 'encrypt-gid=', 'decrypt-uid=', 'encrypt-uid=']
        opts, args = getopt.getopt(sys.argv[1:], 'pxf:', advanced)
    except getopt.GetoptError:
        print('ERROR: Invalid arguments provided.')
        print_help()
        sys.exit(2)

    if len(opts) == 0:
        print_help()
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-p':
            device = dfu.acquire_device()
            serial_number = device.serial_number
            dfu.release_device(device)

            if 'CPID:8720' in serial_number:
                steaks4uce.exploit()
            elif 'CPID:8920' in serial_number:
                limera1n.exploit()
            elif 'CPID:8922' in serial_number:
                limera1n.exploit()
            elif 'CPID:8930' in serial_number:
                SHAtter.exploit()
            elif 'CPID:8947' in serial_number:
                checkm8.exploit()
            elif 'CPID:8950' in serial_number:
                checkm8.exploit()
            elif 'CPID:8955' in serial_number:
                checkm8.exploit()
            elif 'CPID:8960' in serial_number:
                checkm8.exploit()
            elif 'CPID:8002' in serial_number:
                checkm8.exploit()
            elif 'CPID:8004' in serial_number:
                checkm8.exploit()
            elif 'CPID:8010' in serial_number:
                checkm8.exploit()
            elif 'CPID:8011' in serial_number:
                checkm8.exploit()
            elif 'CPID:8015' in serial_number:
                checkm8.exploit()
            else:
                print('Found:', serial_number)
                print('ERROR: This device is not supported.')
                sys.exit(1)

        if opt == '-x':
            device = PwnedDFUDevice()
            if device.config.cpid != '8920':
                print('This is not a compatible device. alloc8 exploit is for iPhone 3GS only.')
                sys.exit(1)

            if device.config.version == '359.3':
                print('WARNING: iPhone 3GS (old bootrom) was detected. Use 24Kpwn exploit for faster boots, alloc8 exploit is for testing purposes only.')
                input("Press ENTER to continue.")

            print('Installing alloc8 exploit to NOR.')

            dump = device.nor_dump(saveBackup=True)

            nor = nor.NorData(dump)

            for byte in nor.parts[1]:
                if byte != '\x00':
                    print('ERROR: Bytes following IMG2 header in NOR are not zero. alloc8 exploit was likely previously installed. Exiting.')
                    sys.exit(1)
            if len(nor.images) == 0 or len(nor.images[0]) < 0x24000:
                print('ERROR: 24Kpwn LLB was not found. You must restore a custom 24Kpwn IPSW before using this exploit.')
                sys.exit(1)

            print('Preparing modified NOR with alloc8 exploit.')
            # Remove 24Kpwn first.
            nor.images[0] = image3_24Kpwn.remove_exploit(nor.images[0])
            new_nor = alloc8.exploit(nor, device.config.version)
            device.flash_nor(new_nor.dump())

        if opt == '-f':
            try:
                with open(arg, 'rb') as f:
                    data = f.read()
            except IOError:
                print('ERROR: Could not read file:', arg)
                sys.exit(1)

            device = dfu.acquire_device()
            dfu.reset_counters(device)
            dfu.send_data(device, data)
            dfu.request_image_validation(device)
            dfu.release_device(device)

        if opt == '--demote':
            device = dfu.acquire_device()
            serial_number = device.serial_number
            dfu.release_device(device)

            if 'PWND:[checkm8]' in serial_number:
                pwned = usbexec.PwnedUSBDevice()
                old_value = pwned.read_memory_uint32(pwned.platform.demotion_reg)
                print('Demotion register: 0x%x' % old_value)
                if old_value & 1:
                    print('Attempting to demote device.')
                    pwned.write_memory_uint32(pwned.platform.demotion_reg, old_value & 0xFFFFFFFE)
                    new_value = pwned.read_memory_uint32(pwned.platform.demotion_reg)
                    print('Demotion register: 0x%x' % new_value)
                    if old_value != new_value:
                        print('Success!')
                    else:
                        print('Failed.')
                else:
                    print('WARNING: Device is already demoted.')
            else:
                print('ERROR: Demotion is only supported on devices pwned with checkm8 exploit.')
                sys.exit(1)

        if opt == '--dump':
            if arg.count(',') != 1:
                print('ERROR: You must provide exactly  2 comma separated values: address,length')
                sys.exit(1)
            raw_address, raw_length = arg.split(',')
            address = int(raw_address, 16) if raw_address.startswith('0x') else int(raw_address, 10)
            length = int(raw_length, 16) if raw_length.startswith('0x') else int(raw_length, 10)

            device = dfu.acquire_device()
            serial_number = device.serial_number
            dfu.release_device(device)

            if 'PWND:[checkm8]' in serial_number:
                device = usbexec.PwnedUSBDevice()
                sys.stdout.write(device.read_memory(address, length))
            else:
                device = PwnedDFUDevice()
                print(device.read_memory(address, length))

        if opt == '--hexdump':
            if arg.count(',') != 1:
                print('ERROR: You must provide exactly 2 comma separated values: address,length')
                sys.exit(1)
            raw_address, raw_length = arg.split(',')
            address = int(raw_address, 16) if raw_address.startswith('0x') else int(raw_address, 10)
            length = int(raw_length, 16) if raw_length.startswith('0x') else int(raw_length, 10)

            device = dfu.acquire_device()
            serial_number = device.serial_number
            dfu.release_device(device)

            if 'PWND:[checkm8]' in serial_number:
                device = usbexec.PwnedUSBDevice()
                dump = device.read_memory(address, length)
                for line in utilities.hex_dump(dump, address).splitlines():
                    print('%x: %s' % (address, line[10:]))
                    address += 16
            else:
                device = PwnedDFUDevice()
                dump = device.read_memory(address, length)
                print(utilities.hex_dump(dump, address),)

        if opt == '--dump-rom':
            device = dfu.acquire_device()
            serial_number = device.serial_number
           
